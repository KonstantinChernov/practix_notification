name: Notification Sprint

on:
  push:
    branches: ['cicd','master']
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt


  linter_checks:
    name: Check code with flake8
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
              python -m pip install --upgrade pip
              pip install wemake-python-styleguide

      - name: Lint with flake8
        id: linter
        run: |
            # stop the build if there are Python syntax errors or undefined names
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
            flake8 . --format=html --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics > report.html

      - name: Create file status_linter.txt and write the job status into it
        if: always()
        run: |
          echo ${{ job.status }} > status_linter.txt

      - name: Upload file status_linter.txt as an artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: pass_status_linter
          path: status_linter.txt

      - name: Save linter report
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: report_linter
          path: report.html

  type_checks:
    name: Check types
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy

      - name: Checking types
        id: types
        run: |
          mypy .

      - name: Create file status_types.txt and write the job status into it
        if: always()
        run: |
          echo ${{ job.status }} > status_types.txt

      - name: Upload file status_types.txt as an artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: pass_status_types
          path: status_types.txt



  send_message:
    name: Send message to telegram
    runs-on: ubuntu-latest
    if: always()
    needs: [build, linter_checks, type_checks ]
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF##*/})"
        id: extract_branch

      - name: Download artifact pass_status_linter
        uses: actions/download-artifact@v1
        with:
          name: pass_status_linter

      - name: Download artifact pass_status_types
        uses: actions/download-artifact@v1
        with:
          name: pass_status_types


      - name: Set the statuses checks params
        id: set_outputs
        run: |
          echo "::set-output name=status_linter::$(<pass_status_linter/status_linter.txt)"
          echo "::set-output name=status_types::$(<pass_status_types/status_types.txt)"



      - name: debug_mode
        if: steps.extract_branch.outputs.branch == 'cicd'
        run: echo "status_linter = ${{ steps.set_outputs.outputs.status_linter }}"
             echo "status_types = ${{ steps.set_outputs.outputs.status_types }}"
             echo "${{ env.REPORTHTML }}"

      - name: send message
        uses: appleboy/telegram-action@master
        if: steps.extract_branch.outputs.branch == 'master'
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: | 
            ✨✨✨
            branch: ${{ steps.extract_branch.outputs.branch }}
            ${{ github.job}} job in workflow ${{ github.workfllow }} of ${{ github.repository }} has ${{ job.status }}!
            Commit message: ${{ github.event.commits[0].message }}
            Repository: ${{ github.repository }}
            ---
            Linter checks: ${{ steps.set_outputs.outputs.status_linter }}
            Types checks: ${{ steps.set_outputs.outputs.status_types }}
            
  

    continue-on-error: true

